// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CourseSystem.Entity
{
    public partial class CourseselectiondbContext : DbContext
    {
        public CourseselectiondbContext()
        {
        }

        public CourseselectiondbContext(DbContextOptions<CourseselectiondbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CourseDatum> CourseData { get; set; }
        public virtual DbSet<RolesTable> RolesTables { get; set; }
        public virtual DbSet<StudentInfo> StudentInfos { get; set; }
        public virtual DbSet<StudentsCourseInfoTable> StudentsCourseInfoTables { get; set; }
        public virtual DbSet<TeacherInfo> TeacherInfos { get; set; }
        public virtual DbSet<TrainingPlan> TrainingPlans { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=aspnet-CourseSystem.Server-7636730D-75B4-4A4B-A245-81E15546F5A7;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<CourseDatum>(entity =>
            {
                entity.Property(e => e.CourseName).IsFixedLength();

                entity.Property(e => e.Major).IsFixedLength();

                entity.Property(e => e.Students).IsFixedLength();

                entity.Property(e => e.TeacherName).IsFixedLength();

                entity.Property(e => e.Time).IsFixedLength();

                entity.Property(e => e.Type).IsFixedLength();
            });

            modelBuilder.Entity<RolesTable>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Roles).IsFixedLength();
            });

            modelBuilder.Entity<StudentInfo>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Class).IsFixedLength();

                entity.Property(e => e.College).IsFixedLength();

                entity.Property(e => e.Grade).IsFixedLength();

                entity.Property(e => e.Major).IsFixedLength();

                entity.Property(e => e.Name).IsFixedLength();
            });

            modelBuilder.Entity<StudentsCourseInfoTable>(entity =>
            {
                entity.Property(e => e.ChooseCourse).IsFixedLength();
            });

            modelBuilder.Entity<TeacherInfo>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).IsFixedLength();
            });

            modelBuilder.Entity<TrainingPlan>(entity =>
            {
                entity.Property(e => e.Major).IsFixedLength();

                entity.Property(e => e.MinorScore).IsFixedLength();

                entity.Property(e => e.OptionalScore).IsFixedLength();

                entity.Property(e => e.RequiredScore).IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}